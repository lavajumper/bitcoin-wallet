import groovy.io.FileType
import groovy.xml.XmlUtil

apply plugin: 'com.android.application'
apply plugin: 'androidsvgdrawable'

dependencies {
    api(project(':integration-android')) {
        exclude(group: 'com.google.android', module: 'android')
    }
    api 'com.android.support:support-annotations:26.1.0'
    api 'com.android.support:support-compat:26.1.0'
    api 'com.android.support:appcompat-v7:26.1.0'
    api('com.android.support:support-v13:26.1.0') {
        exclude(group: 'com.android.support', module: 'support-fragment')
        exclude(group: 'com.android.support', module: 'support-media-compat')
    }
    api 'com.android.support:support-core-utils:26.1.0'
    api 'com.android.support:recyclerview-v7:26.1.0'
    api 'com.android.support:cardview-v7:26.1.0'
    //implementation files('C:/Users/root/.m2/repository/org/libdohj/libdohj-core/0.14.4-sexcoin/libdohj-core-0.14.4-sexcoin.jar')
    api 'org.libdohj:libdohj-core:0.14.4-sexcoin'
    api 'com.google.protobuf:protobuf-java:2.6.1'
    api 'com.google.guava:guava:18.0'
    api 'com.google.zxing:core:3.3.1'
    api 'com.squareup.okhttp:okhttp:2.7.5'
    api 'com.squareup.okhttp:logging-interceptor:2.7.5'
    api 'com.squareup.moshi:moshi:1.5.0'
    api 'org.slf4j:slf4j-api:1.7.25'
    api('com.github.tony19:logback-android-classic:1.1.1-6') {
        exclude(group: 'com.google.android', module: 'android')
    }
    api 'com.github.tony19:logback-android-core:1.1.1-6'
    api 'com.google.code.findbugs:jsr305:2.0.3'
    testImplementation 'junit:junit:4.12'
}

ext {
    archivesBaseName = 'sexcoin-wallet'
}

android {
    compileSdkVersion 'android-26'
    buildToolsVersion '28.0.3'

    compileOptions{
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    defaultConfig {
        generatedDensities = ['hdpi', 'xhdpi']
        applicationId 'info.sexcoin.wallet'
        versionCode 333
        versionName '3.3.3-beta1'
        minSdkVersion 16
        targetSdkVersion 26
        vectorDrawables.useSupportLibrary = true

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        externalNativeBuild{
            cmake{
                cFlags '-DHAVE_CONFIG_H'
            }
        }


    }

    externalNativeBuild {
        cmake {
            //version '3.6.0'
            path "../native-scrypt/src/CMakeLists.txt"
            buildStagingDirectory "../native-scrypt/build"
        }
    }

    buildTypes {
        all {
            minifyEnabled true
            proguardFile 'proguard.cfg'
        }
        debug {
            debuggable true
        }
    }

    flavorDimensions "network"
    productFlavors {
        _testnet {
            applicationId 'info.sexcoin.wallet.test'
        }

        _mainnet {
            applicationId 'info.sexcoin.wallet'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        /*test {
            java.srcDirs = ['test']
            resources.srcDirs = ['test']
        }*/
    }

    packagingOptions {
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
        exclude 'lib/x86_64/freebsd/libscrypt.so'
        exclude 'lib/x86_64/linux/libscrypt.so'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixPatterns.gwt.xml'
        exclude 'com/google/thirdparty/publicsuffix/PublicSuffixType.gwt.xml'
        exclude 'org/bitcoinj/crypto/mnemonic/wordlist/english.txt'
        exclude 'org/bitcoinj/crypto/cacerts'
        exclude 'org.bitcoin.production.checkpoints.txt'
        exclude 'org.bitcoin.test.checkpoints.txt'
    }
}
/*
task svgToPngMipmap(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    from = files('graphics/mipmap')
    to = file('res')
    targetedDensities = ['hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    outputFormat = 'PNG'
    outputType = 'mipmap'
}
*/
android.applicationVariants.all{ variant ->
    variant.mergeResources.doLast{
        LangUpdater.main(new File("${buildDir}/intermediates/res/merged/${variant.dirName}/"))
    }
}

class LangUpdater {
    static def main(File dir) {
        def list = []
        dir.eachFileRecurse (FileType.FILES) { file ->
            list << file
        }
        doReplace(list)
    }

    static def doReplace(ArrayList<File> f) {
        def toDo = []
        f.each {
            if (it.getName().matches("values(-\\w{2})?(-\\w{2})?.xml")) {
                toDo << it
            }
        }

        toDo.each {
            def xml = replaceStrings(it)
            def writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(it.getAbsolutePath()), "UTF-8"))
            XmlUtil.serialize(xml, writer)
        }
    }

    static def replaceStrings(File f) {
        def resources = new XmlSlurper().parse(f)
        resources.string.each {
            it.replaceBody(tryAllReplacements(it.text()))
        }
        return resources
    }

    static def tryAllReplacements(String s) {
        String res = s
        // Do some specifics first
        res = res.replaceAll("bitcoinj", "libdohj")
        res = res.replaceAll("bitboy", "sexcoin.info")

        // Esperanto specifics
        res = res.replaceAll("Bitmon", "Sexmon")
        res = res.replaceAll("bitmon", "sexmon")

        // Japanese specifics
        res = res.replaceAll("ビット", "ドージ")

        // Chinese specifics
        res = res.replaceAll("比特", "狗狗")

        // And the rest
        res = res.replaceAll("BTC", "SXC")
        res = res.replaceAll("bitcoin", "sexcoin")
        res = res.replaceAll("Bitcoin", "Sexcoin")

        res = res.replaceAll("Dogecoin", "Sexcoin")
        res = res.replaceAll("dogecoin", "sexcoin")

        return res;
    }
}
